// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// ChangePasswordRequest defines model for ChangePasswordRequest.
type ChangePasswordRequest struct {

	// The new password to set.
	NewPassword string `json:"new_password"`

	// The old or existing password
	OldPassword string `json:"old_password"`
}

// Claim defines model for Claim.
type Claim struct {

	// A short dercription about the claim.
	Description *string `json:"description,omitempty"`

	// Internal identifier of the claim
	Id int `json:"id"`

	// A alphanumeric name, to represent claim name in OAuth2 claim.
	Name string `json:"name"`
}

// ClaimPage defines model for ClaimPage.
type ClaimPage struct {
	// Embedded fields due to inline allOf schema

	// an array of claims
	Claims []Claim `json:"claims"`
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page
}

// Error defines model for Error.
type Error struct {

	// Error code
	ErrorCode string `json:"error_code"`

	// Detail description
	Message string `json:"message"`
}

// Page defines model for Page.
type Page struct {

	// Page number of the response chunk
	PageNumber int `json:"page_number"`

	// Total available pages
	PageTotal int `json:"page_total"`
}

// Scope defines model for Scope.
type Scope struct {

	// A short dercription about the scope.
	Description *string `json:"description,omitempty"`

	// Internal identifier of the scope
	Id int `json:"id"`

	// Scope name. alphanumeric characters only.
	Name string `json:"name"`
}

// ScopePage defines model for ScopePage.
type ScopePage struct {
	// Embedded fields due to inline allOf schema

	// An array of scopes as returned in search result or so.
	Scopes []Scope `json:"scopes"`
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page
}

// Secret defines model for Secret.
type Secret struct {

	// Suitable algorithm for the key. allowed values are all supported `JWS` and `JWK` algorithms.
	Algorithm string `json:"algorithm"`

	// Date when the secret expires
	ExpiresAt time.Time `json:"expires_at"`

	// Date when the key was issued
	IssuedAt time.Time `json:"issued_at"`

	// usage of the key
	KeyUsage string `json:"key_usage"`
}

// SecretChannel defines model for SecretChannel.
type SecretChannel struct {

	// Suitable algorithm for the key. allowed values are all supported `JWS` and `JWK` algorithms.
	Algorithm string `json:"algorithm"`

	// Identifier of the `SecretChannel`.
	Id int `json:"id"`

	// usage of the key
	KeyUsage string `json:"key_usage"`

	// A friendly name for the key channel
	Name string `json:"name"`

	// A list of secrets associates with channel
	Secrets []Secret `json:"secrets"`

	// How mant days the key will be valid, when generated or renewed
	ValidityDay int `json:"validity_day"`
}

// SecretChannelPage defines model for SecretChannelPage.
type SecretChannelPage struct {
	// Embedded fields due to inline allOf schema

	// An array of `SecretChannelSummary` objects
	Channels []SecretChannelSummary `json:"channels"`
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page
}

// SecretChannelSummary defines model for SecretChannelSummary.
type SecretChannelSummary struct {

	// Suitable algorithm for the key. allowed values are all supported `JWS` and `JWK` algorithms.
	Algorithm string `json:"algorithm"`

	// Identifier of the `SecretChannel`.
	Id int `json:"id"`

	// usage of the key
	KeyUsage string `json:"key_usage"`

	// A friendly name for the key channel
	Name string `json:"name"`
}

// ServiceProvider defines model for ServiceProvider.
type ServiceProvider struct {
	// Embedded fields due to inline allOf schema

	// Kind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type MUST only register URLs using the https scheme as redirect_uris; they MUST NOT use localhost as the hostname. Native Clients MUST only register redirect_uris using custom URI schemes or URLs using the http: scheme with localhost as the hostname. Authorization Servers MAY place additional constraints on Native Clients. Authorization Servers MAY reject Redirection URI values using the http scheme, other than the localhost case for Native Clients. The Authorization Server MUST verify that all the registered redirect_uris conform to these constraints. This prevents sharing a Client ID across different types of Clients.
	ApplicationType string `json:"application_type"`

	// A description of a service provider
	Description *string `json:"description,omitempty"`

	// JSON array containing a list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. The Grant Type values used by
	//
	// OpenID Connect are:
	// 1. authorization_code: The Authorization Code Grant Type described in OAuth 2.0 Section 4.1.
	// 1. implicit: The Implicit Grant Type described in OAuth 2.0 Section 4.2.
	// 1. refresh_token: The Refresh Token Grant Type described in OAuth 2.0 Section 6.
	//
	// The following table lists the correspondence between response_type values that the Client will use and grant_type values that MUST be included in the registered grant_types list:
	//
	// 1. code: authorization_code
	// 1. id_token: implicit
	// 1. token id_token: implicit
	// 1. code id_token: authorization_code, implicit
	// 1. code token: authorization_code, implicit
	// 1. code token id_token: authorization_code, implicit
	//
	// If omitted, the default is that the Client will use only the authorization_code Grant Type.
	GrantTypes []string `json:"grant_types"`

	// Name of the Client to be presented to the End-User. If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
	Name string `json:"name"`

	// Array of Redirection URI values used by the Client. One of these registered Redirection URI values MUST exactly match the redirect_uri parameter value used in each Authorization Request, with the matching performed as described in Section 6.2.1 of [RFC3986] (Simple String Comparison).
	RedirectUris []string `json:"redirect_uris"`

	// Array of request_uri values that are pre-registered by the RP for use at the OP. Servers MAY cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request. OPs can require that request_uri values used be pre-registered with the require_request_uri_registration discovery parameter.
	// If the contents of the request file could ever change, these URI values SHOULD include the base64url encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment. If the fragment value used for a URI changes, that signals the server that its cached value for that URI with the old fragment value is no longer valid.
	RequestUris *[]string `json:"request_uris,omitempty"`

	// Approved oauth scopes for the service providers
	Scope []string `json:"scope"`
	// Embedded struct due to allOf(#/components/schemas/ServiceProviderInfo)
	ServiceProviderInfo
	// Embedded struct due to allOf(#/components/schemas/ServiceProviderConfig)
	ServiceProviderConfig
}

// ServiceProviderConfig defines model for ServiceProviderConfig.
type ServiceProviderConfig struct {

	// Default Maximum Authentication Age. Specifies that the End-User MUST be actively authenticated if the End-User was authenticated longer ago than the specified number of seconds. The max_age request parameter overrides this default value. If omitted, no default Maximum Authentication Age is specified.
	DefaultMaxAge *string `json:"default_max_age,omitempty"`

	// JWE alg algorithm [JWA] REQUIRED for encrypting the ID Token issued to this Client. If this is requested, the response will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted, is that no encryption is performed.
	IdTokenEncryptedResponseAlg *string `json:"id_token_encrypted_response_alg,omitempty"`

	// JWE enc algorithm [JWA] REQUIRED for encrypting the ID Token issued to this Client. If id_token_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided.
	IdTokenEncryptedResponseEnc *string `json:"id_token_encrypted_response_enc,omitempty"`

	// JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
	IdTokenSignedResponseAlg *string `json:"id_token_signed_response_alg,omitempty"`

	// Client's JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.
	Jwks *string `json:"jwks,omitempty"`

	// URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
	JwksUri *string `json:"jwks_uri,omitempty"`

	//  JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used, since this signals to the OP that a client_secret value needs to be returned from which the symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other supported encryption algorithms or send unencrypted Request Objects, even when this parameter is present. If both signing and encryption are requested, the Request Object will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.
	RequestObjectEncryptionAlg *string `json:"request_object_encryption_alg,omitempty"`

	// JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request Objects sent to the OP. If request_object_encryption_alg is specified, the default for this value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg MUST also be provided.
	RequestObjectEncryptionEnc *string `json:"request_object_encryption_enc,omitempty"`

	// JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm. Request Objects are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. This algorithm MUST be used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). Servers SHOULD support RS256. The value none MAY be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.
	RequestObjectSigningAlg *string `json:"request_object_signing_alg,omitempty"`

	// Boolean value specifying whether the auth_time Claim in the ID Token is REQUIRED. It is REQUIRED when the value is true. (If this is false, the auth_time Claim can still be dynamically requested as an individual Claim for the ID Token using the claims request parameter described in Section 5.5.1 of OpenID Connect Core 1.0 [OpenID.Core].) If omitted, the default value is false.
	RequireAuthTime *string `json:"require_auth_time,omitempty"`

	// Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none, as described in Section 9 of OpenID Connect Core 1.0 [OpenID.Core]. Other authentication methods MAY be defined by extensions. If omitted, the default is client_secret_basic -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of OAuth 2.0 [RFC6749].
	TokenEndpointAuthMethod *string `json:"token_endpoint_auth_method,omitempty"`

	// JWS [JWS] alg algorithm [JWA] that MUST be used for signing the JWT [JWT] used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. All Token Requests using these authentication methods from this Client MUST be rejected, if the JWT is not signed with this algorithm. Servers SHOULD support RS256. The value none MUST NOT be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.
	TokenEndpointAuthSigningAlg *string `json:"token_endpoint_auth_signing_alg,omitempty"`

	// JWE [JWE] alg algorithm [JWA] REQUIRED for encrypting UserInfo Responses. If both signing and encryption are requested, the response will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted, is that no encryption is performed.
	UserinfoEncryptedResponseAlg *string `json:"userinfo_encrypted_response_alg,omitempty"`

	// JWE enc algorithm [JWA] REQUIRED for encrypting UserInfo Responses. If userinfo_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided.
	UserinfoEncryptedResponseEnc *string `json:"userinfo_encrypted_response_enc,omitempty"`

	// JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
	UserinfoSignedResponseAlg *string `json:"userinfo_signed_response_alg,omitempty"`
}

// ServiceProviderCredentials defines model for ServiceProviderCredentials.
type ServiceProviderCredentials struct {

	// Client identifier
	ClientId string `json:"client_id"`

	// Client secret
	ClientSecret string `json:"client_secret"`
}

// ServiceProviderInfo defines model for ServiceProviderInfo.
type ServiceProviderInfo struct {

	// URL of the home page of the Client. The value of this field MUST point to a valid Web page. If present, the server SHOULD display this URL to the End-User in a followable fashion. If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
	ClientUri *string `json:"client_uri,omitempty"`

	// Array of e-mail addresses of people responsible for this Client. This might be used by some providers to enable a Web user interface to modify the Client information.
	Contacts *[]string `json:"contacts,omitempty"`

	// URI using the https scheme that a third party can use to initiate a login by the RP, as specified in Section 4 of OpenID Connect Core 1.0 [OpenID.Core]. The URI MUST accept requests via both GET and POST. The Client MUST understand the login_hint and iss parameters and SHOULD support the target_link_uri parameter.
	InitiateLoginUri *string `json:"initiate_login_uri,omitempty"`

	// URL that references a logo for the Client application. If present, the server SHOULD display this image to the End-User during approval. The value of this field MUST point to a valid image file. If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
	LogoUri *string `json:"logo_uri,omitempty"`

	// URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used. The value of this field MUST point to a valid web page. The OpenID Provider SHOULD display this URL to the End-User if it is given. If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
	PolicyUri *string `json:"policy_uri,omitempty"`

	// URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service. The value of this field MUST point to a valid web page. The OpenID Provider SHOULD display this URL to the End-User if it is given. If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
	TosUri *string `json:"tos_uri,omitempty"`
}

// ServiceProviderSummary defines model for ServiceProviderSummary.
type ServiceProviderSummary struct {

	// A description of the service provider
	Description *string `json:"description,omitempty"`

	// Identifier of the provider.
	Id int `json:"id"`

	// Service provider name
	Name string `json:"name"`
}

// ServiceProviderSummaryPage defines model for ServiceProviderSummaryPage.
type ServiceProviderSummaryPage struct {
	// Embedded fields due to inline allOf schema

	// An array of service provider summary in one page.
	ServiceProviders []ServiceProviderSummary `json:"service_providers"`
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page
}

// User defines model for User.
type User struct {
	// Embedded fields due to inline allOf schema

	// End-User's preferred postal address. The value of the address member is a JSON [RFC4627] structure containing some or all of the members defined in Section 5.1.1.
	Address *UserAddress `json:"address,omitempty"`

	// End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
	Birthdate *openapi_types.Date `json:"birthdate,omitempty"`

	// End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
	Gender *string `json:"gender,omitempty"`

	// User identifier.
	Id int `json:"id"`

	// End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
	Locale *string `json:"locale,omitempty"`

	// Username for login
	Username string `json:"username"`

	// String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
	Zoneinfo *string `json:"zoneinfo,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/UserName)
	UserName
	// Embedded struct due to allOf(#/components/schemas/UserProfile)
	UserProfile
	// Embedded struct due to allOf(#/components/schemas/UserContact)
	UserContact
	// Embedded struct due to allOf(#/components/schemas/UserAddress)
	UserAddress
}

// UserAddress defines model for UserAddress.
type UserAddress struct {

	// Country name component.
	Country *string `json:"country,omitempty"`

	// Full mailing address, formatted for display or use on a mailing label. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair ("\r\n") or as a single line feed character ("\n").
	Formatted *string `json:"formatted,omitempty"`

	// City or locality component.
	Locality *string `json:"locality,omitempty"`

	// Zip code or postal code component.
	PostalCode *string `json:"postal_code,omitempty"`

	// State, province, prefecture, or region component.
	Region *string `json:"region,omitempty"`

	// Full street address component, which MAY include house number, street name, Post Office Box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair ("\r\n") or as a single line feed character ("\n").
	StreetAddress *string `json:"street_address,omitempty"`
}

// UserContact defines model for UserContact.
type UserContact struct {

	// End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
	Email *string `json:"email,omitempty"`

	// True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
	EmailVerified *bool `json:"email_verified,omitempty"`

	// End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
	PhoneNumber *string `json:"phone_number,omitempty"`

	// User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
	PhoneNumberVerified *bool `json:"phone_number_verified,omitempty"`
}

// UserName defines model for UserName.
type UserName struct {

	// Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
	FamilyName *string `json:"family_name,omitempty"`

	// Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
	GivenName *string `json:"given_name,omitempty"`

	// Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
	MiddleName *string `json:"middle_name,omitempty"`

	// End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
	Name *string `json:"name,omitempty"`

	// Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
	Nickname *string `json:"nickname,omitempty"`

	// Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace. The RP MUST NOT rely upon this value being unique.
	PreferredUsername *string `json:"preferred_username,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {

	// URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
	Picture *string `json:"picture,omitempty"`

	// URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
	Profile *string `json:"profile,omitempty"`

	// URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
	Website *string `json:"website,omitempty"`
}

// UserRecoverPassword defines model for UserRecoverPassword.
type UserRecoverPassword struct {

	// Email id of the user to confirm with user store
	Email string `json:"email"`

	// Username of the user
	Username string `json:"username"`
}

// UserResetPassword defines model for UserResetPassword.
type UserResetPassword struct {

	// One time password received through initiation process
	Otp string `json:"otp"`

	// Username of the user
	Username string `json:"username"`
}

// UserStatusUpdate defines model for UserStatusUpdate.
type UserStatusUpdate struct {

	// New status to change to.
	Active bool `json:"active"`
}

// UserSummary defines model for UserSummary.
type UserSummary struct {

	// User is active or inactive
	Active *bool `json:"active,omitempty"`

	// User is blocked by invalid attempt
	Blocked *bool `json:"blocked,omitempty"`

	// Email address
	Email *string `json:"email,omitempty"`

	// Login username
	Username *string `json:"username,omitempty"`
}

// UserSummaryPage defines model for UserSummaryPage.
type UserSummaryPage struct {
	// Embedded fields due to inline allOf schema

	// A collection of users
	Users []UserSummary `json:"users"`
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page
}

// UnAuthorized defines model for UnAuthorized.
type UnAuthorized Error

// GetClaimsParams defines parameters for GetClaims.
type GetClaimsParams struct {

	// Number of items in each page.
	// Default value is 10.
	PageSize *int `json:"page_size,omitempty"`

	// Page number to return in response.
	// Starts with 1 and default value is 1 too.
	PageNumber *int `json:"page_number,omitempty"`
}

// CreateClaimJSONBody defines parameters for CreateClaim.
type CreateClaimJSONBody Claim

// FindClaimByNameParams defines parameters for FindClaimByName.
type FindClaimByNameParams struct {

	// name of the claim
	Name string `json:"name"`
}

// UpdateClaimJSONBody defines parameters for UpdateClaim.
type UpdateClaimJSONBody Claim

// GetScopesParams defines parameters for GetScopes.
type GetScopesParams struct {

	// Number of items in each page.
	// Default value is 10.
	PageSize *int `json:"page_size,omitempty"`

	// Page number to return in response.
	// Starts with 1 and default value is 1 too.
	PageNumber *int `json:"page_number,omitempty"`
}

// CreateScopeJSONBody defines parameters for CreateScope.
type CreateScopeJSONBody Scope

// FindScopeByNameParams defines parameters for FindScopeByName.
type FindScopeByNameParams struct {

	// scope name
	Name string `json:"name"`
}

// UpdateScopeJSONBody defines parameters for UpdateScope.
type UpdateScopeJSONBody Scope

// GetSecretChannelsParams defines parameters for GetSecretChannels.
type GetSecretChannelsParams struct {

	// Number of items in each page.
	// Default value is 10.
	PageSize *int `json:"page_size,omitempty"`

	// Page number to return in response.
	// Starts with 1 and default value is 1 too.
	PageNumber *int `json:"page_number,omitempty"`
}

// CreateSecretChannelJSONBody defines parameters for CreateSecretChannel.
type CreateSecretChannelJSONBody SecretChannel

// FindSecretChannelByAlgouseParams defines parameters for FindSecretChannelByAlgouse.
type FindSecretChannelByAlgouseParams struct {

	// algorithm of the channel
	Algo string `json:"algo"`

	// usage of the secret channel
	Use string `json:"use"`
}

// FindSecretChannelByNameParams defines parameters for FindSecretChannelByName.
type FindSecretChannelByNameParams struct {

	// name of the secret channel
	Name string `json:"name"`
}

// GetServiceProvidersParams defines parameters for GetServiceProviders.
type GetServiceProvidersParams struct {

	// Number of items in each page.
	// Default value is 10.
	PageSize *int `json:"page_size,omitempty"`

	// Page number to return in response.
	// Starts with 1 and default value is 1 too.
	PageNumber *int `json:"page_number,omitempty"`
}

// CreateServiceProviderJSONBody defines parameters for CreateServiceProvider.
type CreateServiceProviderJSONBody ServiceProvider

// FindServiceProviderParams defines parameters for FindServiceProvider.
type FindServiceProviderParams struct {

	// service provider name
	Name *string `json:"name,omitempty"`

	// service provider client id
	ClientId *int `json:"client_id,omitempty"`
}

// PatchServiceProviderJSONBody defines parameters for PatchServiceProvider.
type PatchServiceProviderJSONBody ServiceProvider

// UpdateServiceProviderJSONBody defines parameters for UpdateServiceProvider.
type UpdateServiceProviderJSONBody ServiceProvider

// GenerateCredentialsParams defines parameters for GenerateCredentials.
type GenerateCredentialsParams struct {

	// Indicates wheather to refresh the client_id of not. Default is `false`.
	RefreshId *bool `json:"refresh_id,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {

	// Number of items in each page.
	// Default value is 10.
	PageSize *int `json:"page_size,omitempty"`

	// Page number to return in response.
	// Starts with 1 and default value is 1 too.
	PageNumber *int `json:"page_number,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody User

// FindUserParams defines parameters for FindUser.
type FindUserParams struct {

	// Username of the user
	Username *string `json:"username,omitempty"`

	// email of the user
	Email *string `json:"email,omitempty"`
}

// InitiatePasswordRecoveryJSONBody defines parameters for InitiatePasswordRecovery.
type InitiatePasswordRecoveryJSONBody UserRecoverPassword

// ResetUserPasswordJSONBody defines parameters for ResetUserPassword.
type ResetUserPasswordJSONBody UserResetPassword

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody User

// ChangeUserPasswordJSONBody defines parameters for ChangeUserPassword.
type ChangeUserPasswordJSONBody ChangePasswordRequest

// UpdateUserStatusJSONBody defines parameters for UpdateUserStatus.
type UpdateUserStatusJSONBody UserStatusUpdate

// CreateClaimRequestBody defines body for CreateClaim for application/json ContentType.
type CreateClaimJSONRequestBody CreateClaimJSONBody

// UpdateClaimRequestBody defines body for UpdateClaim for application/json ContentType.
type UpdateClaimJSONRequestBody UpdateClaimJSONBody

// CreateScopeRequestBody defines body for CreateScope for application/json ContentType.
type CreateScopeJSONRequestBody CreateScopeJSONBody

// UpdateScopeRequestBody defines body for UpdateScope for application/json ContentType.
type UpdateScopeJSONRequestBody UpdateScopeJSONBody

// CreateSecretChannelRequestBody defines body for CreateSecretChannel for application/json ContentType.
type CreateSecretChannelJSONRequestBody CreateSecretChannelJSONBody

// CreateServiceProviderRequestBody defines body for CreateServiceProvider for application/json ContentType.
type CreateServiceProviderJSONRequestBody CreateServiceProviderJSONBody

// PatchServiceProviderRequestBody defines body for PatchServiceProvider for application/json ContentType.
type PatchServiceProviderJSONRequestBody PatchServiceProviderJSONBody

// UpdateServiceProviderRequestBody defines body for UpdateServiceProvider for application/json ContentType.
type UpdateServiceProviderJSONRequestBody UpdateServiceProviderJSONBody

// CreateUserRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// InitiatePasswordRecoveryRequestBody defines body for InitiatePasswordRecovery for application/json ContentType.
type InitiatePasswordRecoveryJSONRequestBody InitiatePasswordRecoveryJSONBody

// ResetUserPasswordRequestBody defines body for ResetUserPassword for application/json ContentType.
type ResetUserPasswordJSONRequestBody ResetUserPasswordJSONBody

// UpdateUserRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ChangeUserPasswordRequestBody defines body for ChangeUserPassword for application/json ContentType.
type ChangeUserPasswordJSONRequestBody ChangeUserPasswordJSONBody

// UpdateUserStatusRequestBody defines body for UpdateUserStatus for application/json ContentType.
type UpdateUserStatusJSONRequestBody UpdateUserStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List All claims
	// (GET /v1/api/claims)
	GetClaims(ctx echo.Context, params GetClaimsParams) error
	// Create a Claim
	// (POST /v1/api/claims)
	CreateClaim(ctx echo.Context) error
	// find claim by name
	// (GET /v1/api/claims/find)
	FindClaimByName(ctx echo.Context, params FindClaimByNameParams) error
	// Delete a Claim
	// (DELETE /v1/api/claims/{id})
	DeleteClaim(ctx echo.Context, id int) error
	// Get a Claim
	// (GET /v1/api/claims/{id})
	GetClaim(ctx echo.Context, id int) error
	// Update a Claim
	// (PUT /v1/api/claims/{id})
	UpdateClaim(ctx echo.Context, id int) error
	// List All scopes
	// (GET /v1/api/scopes)
	GetScopes(ctx echo.Context, params GetScopesParams) error
	// Create a Scope
	// (POST /v1/api/scopes)
	CreateScope(ctx echo.Context) error
	// Used to find a scope with name
	// (GET /v1/api/scopes/find)
	FindScopeByName(ctx echo.Context, params FindScopeByNameParams) error
	// Delete a Scope
	// (DELETE /v1/api/scopes/{id})
	DeleteScope(ctx echo.Context, id int) error
	// Get a Scope
	// (GET /v1/api/scopes/{id})
	GetScope(ctx echo.Context, id int) error
	// Update a Scope
	// (PUT /v1/api/scopes/{id})
	UpdateScope(ctx echo.Context, id int) error
	// Remove one claim from scope
	// (DELETE /v1/api/scopes/{id}/claim/{claimId})
	RemoveClaimFromScope(ctx echo.Context, id int, claimId int) error
	// Add one claim to scope
	// (PUT /v1/api/scopes/{id}/claim/{claimId})
	AddClaimToScope(ctx echo.Context, id int, claimId int) error
	// List All secretchannels
	// (GET /v1/api/secretchannels)
	GetSecretChannels(ctx echo.Context, params GetSecretChannelsParams) error
	// Create a SecretChannel
	// (POST /v1/api/secretchannels)
	CreateSecretChannel(ctx echo.Context) error
	// Find secret channel by algo and use
	// (GET /v1/api/secretchannels/find/algouse)
	FindSecretChannelByAlgouse(ctx echo.Context, params FindSecretChannelByAlgouseParams) error
	// Fins secret by name
	// (GET /v1/api/secretchannels/find/name)
	FindSecretChannelByName(ctx echo.Context, params FindSecretChannelByNameParams) error
	// Delete a SecretChannel
	// (DELETE /v1/api/secretchannels/{id})
	DeleteSecretChannel(ctx echo.Context, id int) error
	// Get a SecretChannel
	// (GET /v1/api/secretchannels/{id})
	GetSecretChannel(ctx echo.Context, id int) error
	// Renew the secret of the channel
	// (POST /v1/api/secretchannels/{id})
	RenewSecretChannel(ctx echo.Context, id int) error
	// List All serviceproviders
	// (GET /v1/api/serviceproviders)
	GetServiceProviders(ctx echo.Context, params GetServiceProvidersParams) error
	// Create a ServiceProvider
	// (POST /v1/api/serviceproviders)
	CreateServiceProvider(ctx echo.Context) error
	// find sp by client id or name
	// (GET /v1/api/serviceproviders/find)
	FindServiceProvider(ctx echo.Context, params FindServiceProviderParams) error
	// Delete a ServiceProvider
	// (DELETE /v1/api/serviceproviders/{id})
	DeleteServiceProvider(ctx echo.Context, id int) error
	// Get a ServiceProvider
	// (GET /v1/api/serviceproviders/{id})
	GetServiceProvider(ctx echo.Context, id int) error
	// Patch service provider
	// (PATCH /v1/api/serviceproviders/{id})
	PatchServiceProvider(ctx echo.Context, id int) error
	// Update a ServiceProvider
	// (PUT /v1/api/serviceproviders/{id})
	UpdateServiceProvider(ctx echo.Context, id int) error
	// deactivate service provider
	// (DELETE /v1/api/serviceproviders/{id}/activate)
	DeactivateServiceProvider(ctx echo.Context, id int) error
	// Activate a service provider
	// (POST /v1/api/serviceproviders/{id}/activate)
	ActivateServiceProvider(ctx echo.Context, id int) error
	// Retrieves the existing credentials
	// (GET /v1/api/serviceproviders/{id}/credentials)
	GetCredentials(ctx echo.Context, id int) error
	// Update a Client
	// (PUT /v1/api/serviceproviders/{id}/credentials)
	GenerateCredentials(ctx echo.Context, id int, params GenerateCredentialsParams) error
	// List All users
	// (GET /v1/api/users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create a User
	// (POST /v1/api/users)
	CreateUser(ctx echo.Context) error
	// find user by username or email id
	// (GET /v1/api/users/find)
	FindUser(ctx echo.Context, params FindUserParams) error
	// Initiate Password Recovery
	// (POST /v1/api/users/recover/password)
	InitiatePasswordRecovery(ctx echo.Context) error
	// Reset password, after recovery
	// (PUT /v1/api/users/recover/password)
	ResetUserPassword(ctx echo.Context) error
	// Delete a User
	// (DELETE /v1/api/users/{id})
	DeleteUser(ctx echo.Context, id int) error
	// Get a User
	// (GET /v1/api/users/{id})
	GetUser(ctx echo.Context, id int) error
	// Update a User
	// (PUT /v1/api/users/{id})
	UpdateUser(ctx echo.Context, id int) error
	// Change Password
	// (POST /v1/api/users/{id}/password)
	ChangeUserPassword(ctx echo.Context, id int) error
	// Update status
	// (POST /v1/api/users/{id}/status)
	UpdateUserStatus(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetClaims converts echo context to params.
func (w *ServerInterfaceWrapper) GetClaims(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClaimsParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClaims(ctx, params)
	return err
}

// CreateClaim converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClaim(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateClaim(ctx)
	return err
}

// FindClaimByName converts echo context to params.
func (w *ServerInterfaceWrapper) FindClaimByName(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindClaimByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindClaimByName(ctx, params)
	return err
}

// DeleteClaim converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteClaim(ctx, id)
	return err
}

// GetClaim converts echo context to params.
func (w *ServerInterfaceWrapper) GetClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClaim(ctx, id)
	return err
}

// UpdateClaim converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateClaim(ctx, id)
	return err
}

// GetScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetScopes(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScopesParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScopes(ctx, params)
	return err
}

// CreateScope converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScope(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateScope(ctx)
	return err
}

// FindScopeByName converts echo context to params.
func (w *ServerInterfaceWrapper) FindScopeByName(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindScopeByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindScopeByName(ctx, params)
	return err
}

// DeleteScope converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScope(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScope(ctx, id)
	return err
}

// GetScope converts echo context to params.
func (w *ServerInterfaceWrapper) GetScope(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScope(ctx, id)
	return err
}

// UpdateScope converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateScope(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateScope(ctx, id)
	return err
}

// RemoveClaimFromScope converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveClaimFromScope(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "claimId" -------------
	var claimId int

	err = runtime.BindStyledParameter("simple", false, "claimId", ctx.Param("claimId"), &claimId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter claimId: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveClaimFromScope(ctx, id, claimId)
	return err
}

// AddClaimToScope converts echo context to params.
func (w *ServerInterfaceWrapper) AddClaimToScope(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "claimId" -------------
	var claimId int

	err = runtime.BindStyledParameter("simple", false, "claimId", ctx.Param("claimId"), &claimId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter claimId: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddClaimToScope(ctx, id, claimId)
	return err
}

// GetSecretChannels converts echo context to params.
func (w *ServerInterfaceWrapper) GetSecretChannels(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSecretChannelsParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSecretChannels(ctx, params)
	return err
}

// CreateSecretChannel converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSecretChannel(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSecretChannel(ctx)
	return err
}

// FindSecretChannelByAlgouse converts echo context to params.
func (w *ServerInterfaceWrapper) FindSecretChannelByAlgouse(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindSecretChannelByAlgouseParams
	// ------------- Required query parameter "algo" -------------

	err = runtime.BindQueryParameter("form", true, true, "algo", ctx.QueryParams(), &params.Algo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter algo: %s", err))
	}

	// ------------- Required query parameter "use" -------------

	err = runtime.BindQueryParameter("form", true, true, "use", ctx.QueryParams(), &params.Use)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter use: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindSecretChannelByAlgouse(ctx, params)
	return err
}

// FindSecretChannelByName converts echo context to params.
func (w *ServerInterfaceWrapper) FindSecretChannelByName(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindSecretChannelByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindSecretChannelByName(ctx, params)
	return err
}

// DeleteSecretChannel converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSecretChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSecretChannel(ctx, id)
	return err
}

// GetSecretChannel converts echo context to params.
func (w *ServerInterfaceWrapper) GetSecretChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSecretChannel(ctx, id)
	return err
}

// RenewSecretChannel converts echo context to params.
func (w *ServerInterfaceWrapper) RenewSecretChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RenewSecretChannel(ctx, id)
	return err
}

// GetServiceProviders converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceProviders(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceProvidersParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceProviders(ctx, params)
	return err
}

// CreateServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) CreateServiceProvider(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateServiceProvider(ctx)
	return err
}

// FindServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) FindServiceProvider(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindServiceProviderParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindServiceProvider(ctx, params)
	return err
}

// DeleteServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteServiceProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteServiceProvider(ctx, id)
	return err
}

// GetServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceProvider(ctx, id)
	return err
}

// PatchServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) PatchServiceProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchServiceProvider(ctx, id)
	return err
}

// UpdateServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateServiceProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateServiceProvider(ctx, id)
	return err
}

// DeactivateServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) DeactivateServiceProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeactivateServiceProvider(ctx, id)
	return err
}

// ActivateServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ActivateServiceProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ActivateServiceProvider(ctx, id)
	return err
}

// GetCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredentials(ctx, id)
	return err
}

// GenerateCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateCredentialsParams
	// ------------- Optional query parameter "refresh_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "refresh_id", ctx.QueryParams(), &params.RefreshId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateCredentials(ctx, id, params)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// FindUser converts echo context to params.
func (w *ServerInterfaceWrapper) FindUser(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindUserParams
	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUser(ctx, params)
	return err
}

// InitiatePasswordRecovery converts echo context to params.
func (w *ServerInterfaceWrapper) InitiatePasswordRecovery(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InitiatePasswordRecovery(ctx)
	return err
}

// ResetUserPassword converts echo context to params.
func (w *ServerInterfaceWrapper) ResetUserPassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResetUserPassword(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// ChangeUserPassword converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeUserPassword(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeUserPassword(ctx, id)
	return err
}

// UpdateUserStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUserStatus(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/api/claims", wrapper.GetClaims)
	router.POST("/v1/api/claims", wrapper.CreateClaim)
	router.GET("/v1/api/claims/find", wrapper.FindClaimByName)
	router.DELETE("/v1/api/claims/:id", wrapper.DeleteClaim)
	router.GET("/v1/api/claims/:id", wrapper.GetClaim)
	router.PUT("/v1/api/claims/:id", wrapper.UpdateClaim)
	router.GET("/v1/api/scopes", wrapper.GetScopes)
	router.POST("/v1/api/scopes", wrapper.CreateScope)
	router.GET("/v1/api/scopes/find", wrapper.FindScopeByName)
	router.DELETE("/v1/api/scopes/:id", wrapper.DeleteScope)
	router.GET("/v1/api/scopes/:id", wrapper.GetScope)
	router.PUT("/v1/api/scopes/:id", wrapper.UpdateScope)
	router.DELETE("/v1/api/scopes/:id/claim/:claimId", wrapper.RemoveClaimFromScope)
	router.PUT("/v1/api/scopes/:id/claim/:claimId", wrapper.AddClaimToScope)
	router.GET("/v1/api/secretchannels", wrapper.GetSecretChannels)
	router.POST("/v1/api/secretchannels", wrapper.CreateSecretChannel)
	router.GET("/v1/api/secretchannels/find/algouse", wrapper.FindSecretChannelByAlgouse)
	router.GET("/v1/api/secretchannels/find/name", wrapper.FindSecretChannelByName)
	router.DELETE("/v1/api/secretchannels/:id", wrapper.DeleteSecretChannel)
	router.GET("/v1/api/secretchannels/:id", wrapper.GetSecretChannel)
	router.POST("/v1/api/secretchannels/:id", wrapper.RenewSecretChannel)
	router.GET("/v1/api/serviceproviders", wrapper.GetServiceProviders)
	router.POST("/v1/api/serviceproviders", wrapper.CreateServiceProvider)
	router.GET("/v1/api/serviceproviders/find", wrapper.FindServiceProvider)
	router.DELETE("/v1/api/serviceproviders/:id", wrapper.DeleteServiceProvider)
	router.GET("/v1/api/serviceproviders/:id", wrapper.GetServiceProvider)
	router.PATCH("/v1/api/serviceproviders/:id", wrapper.PatchServiceProvider)
	router.PUT("/v1/api/serviceproviders/:id", wrapper.UpdateServiceProvider)
	router.DELETE("/v1/api/serviceproviders/:id/activate", wrapper.DeactivateServiceProvider)
	router.POST("/v1/api/serviceproviders/:id/activate", wrapper.ActivateServiceProvider)
	router.GET("/v1/api/serviceproviders/:id/credentials", wrapper.GetCredentials)
	router.PUT("/v1/api/serviceproviders/:id/credentials", wrapper.GenerateCredentials)
	router.GET("/v1/api/users", wrapper.GetUsers)
	router.POST("/v1/api/users", wrapper.CreateUser)
	router.GET("/v1/api/users/find", wrapper.FindUser)
	router.POST("/v1/api/users/recover/password", wrapper.InitiatePasswordRecovery)
	router.PUT("/v1/api/users/recover/password", wrapper.ResetUserPassword)
	router.DELETE("/v1/api/users/:id", wrapper.DeleteUser)
	router.GET("/v1/api/users/:id", wrapper.GetUser)
	router.PUT("/v1/api/users/:id", wrapper.UpdateUser)
	router.POST("/v1/api/users/:id/password", wrapper.ChangeUserPassword)
	router.POST("/v1/api/users/:id/status", wrapper.UpdateUserStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3qeLT/83AAD//z8BfweA0wAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
